---
title: "Shiny"
author: "Jordan Stout"
date: "11-15-2024"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(reactable)
library(vroom)
library(tidyverse)
library(forcats)
```

2.3.5

1
renderPrint(summary(mtcars))  ->  verbatimTextOutput

renderText("Good morning!")   ->  TextOutput

renderPrint(t.test(1:5, 2:6))  ->  verbatimTextOutput

renderText(str(lm(mpg ~ wt, data = mtcars)))  ->  verbatimTextOutput

2
```{r}
ui <- fluidPage(
    plotOutput("plot", width = "700px", height = "300px")
)

server <- function(input, output, session) {
    output$plot <- renderPlot(plot(1:5), res = 96, alt = "Scatterplot of 5 Numbers")
}

shinyApp(ui, server)
```
3
```{r}
ui <- fluidPage(
    dataTableOutput("table")
)

server <- function(input, output, session) {
    output$table <- renderDataTable(mtcars, options = list(pageLength = 5, ordering = FALSE, searching = FALSE))
}

shinyApp(ui, server)
```

4
```{r}
ui <- fluidPage(
  reactableOutput("table")
)

server <- function(input, output) {
  output$table <- renderReactable({reactable(mtcars)})
}

shinyApp(ui, server)
```



3.3.6

1
```{r}
ui <- fluidPage(
  textInput("name", "What's your name?"),
  textOutput("greeting")
)
```

input has to become output
name has to become input$name
```{r}
server1 <- function(input, output, server) {
  output$greeting <- renderText(paste0("Hello ", input$name))
}
```

make greeting a reactive and add parenthesis
```{r}
server2 <- function(input, output, server) {
  greeting <- reactive(paste0("Hello ", input$name))
  output$greeting <- renderText(greeting())
}
```

missing renderText() and typo
```{r}
server3 <- function(input, output, server) {
  output$greeting <- renderText(paste0("Hello ", input$name))
}
```

2
server1
a -|
   |- c-|
b -|    |
        |-e-f
d-------|

server2
x1 -|
x2 -|--x-|
x3 -|    |
         |--z
y1 -|--y-|
y2 -|

server3
a--a--b--c--d
      |  |  |
b-----|  |  |
         |  |
c--------|  |
            |
d-----------|


3
it won't work because range and var are reserved words in base R


4.8

1
rate v count
                |--body_part
code--selected--|--location
         |      |--diag
         |
         |--summary--age_sex
                   |
y------------------|

narrative
                |--location
code--selected--|--body_part
          ||--||--diag
      summary |
          |   |-----|
y------age_sex      |
                    |
story------------narrative
Best I can do

2
It will change the factor levels order

3
```{r}
ui <- fluidPage(
  fluidRow(
    column(8, selectInput("code", "Product", choices = setNames(products$prod_code, products$title), width = "100%")),
    column(2, selectInput("y", "Y axis", c("rate", "count"))),
    column(2, numericInput("num_rows", "Number of Rows", value = 5, min = 0, max = 6))
  ),
  fluidRow(
    column(4, tableOutput("diag")),
    column(4, tableOutput("body_part")),
    column(4, tableOutput("location"))
  ),
  fluidRow(
    column(12, plotOutput("age_sex"))
  ),
  fluidRow(
    column(2, actionButton("story", "Tell me a story")),
    column(10, textOutput("narrative"))
  )
)

count_top <- function(df, var, n = 5) {
  df |>
    mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) |>
    group_by({{ var }}) |>
    summarise(n = as.integer(sum(weight)))
}

server <- function(input, output, session) {
  selected <- reactive(injuries |> filter(prod_code == input$code))
  
  output$diag <- renderTable(count_top(selected(), diag) |> slice(1:input$num_rows), width = "100%")
  output$body_part <- renderTable(count_top(selected(), body_part) |> slice(1:input$num_rows), width = "100%")
  output$location <- renderTable(count_top(selected(), location) |> slice(1:input$num_rows), width = "100%")
  
  summary <- reactive({
    selected() |>
      count(age, sex, wt = weight) |>
      left_join(population, by = c("age", "sex")) |>
      mutate(rate = n / population * 1e4)
  })
  
  output$age_sex <- renderPlot({
    if (input$y == "count") {
      summary() |>
        ggplot(aes(age, n, colour = sex)) +
        geom_line() +
        labs(y = "Estimated number of injuries")
    } else {
      summary() |>
        ggplot(aes(age, rate, colour = sex)) +
        geom_line(na.rm = TRUE) +
        labs(y = "Injuries per 10,000 people")
    }
  }, res = 96)
  
  narrative_sample <- eventReactive(
    list(input$story, selected()),
    selected() |> pull(narrative) |> sample(1)
  )
  output$narrative <- renderText(narrative_sample())
}

shinyApp(ui, server)
```

4
```{r}
count_top <- function(df, var, n = 5) {
  df |>
    mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) |>
    group_by({{ var }}) |>
    summarise(n = as.integer(sum(weight)))
}

ui <- fluidPage(
  fluidRow(
    column(8, selectInput("code", "Product", choices = setNames(products$prod_code, products$title), width = "100%")),
    column(2, numericInput("rows", "Number of Rows",  min = 1, max = 10, value = 5)),
    column(2, selectInput("y", "Y Axis", c("rate", "count")))
  ),
  fluidRow(
    column(4, tableOutput("diag")),
    column(4, tableOutput("body_part")),
    column(4, tableOutput("location"))
  ),
  fluidRow(
    column(12, plotOutput("age_sex"))
  ),
  fluidRow(
    column(2, actionButton("prev_story", "Previous story")),
    column(2, actionButton("next_story", "Next story")),
    column(8, textOutput("narrative"))
  )
)

server <- function(input, output, session) {
  selected <- reactive(injuries |> filter(prod_code == input$code))
  
  max_no_rows <- reactive(max(length(unique(selected()$diag)), length(unique(selected()$body_part)), length(unique(selected()$location)))
  )
  
  observeEvent(input$code, {
    updateNumericInput(session, "rows", max = max_no_rows())
  })
  
  table_rows <- reactive(input$rows - 1)
  
  output$diag <- renderTable(count_top(selected(), diag, n = table_rows()), width = "100%")
  
  output$body_part <- renderTable(count_top(selected(), body_part, n = table_rows()), width = "100%")
  
  output$location <- renderTable(count_top(selected(), location, n = table_rows()), width = "100%")
  
  summary <- reactive({
    selected() |>
      count(age, sex, wt = weight) |>
      left_join(population, by = c("age", "sex")) |>
      mutate(rate = n / population * 1e4)
  })
  
  output$age_sex <- renderPlot({
    if (input$y == "count") {
      summary() |>
        ggplot(aes(age, n, colour = sex)) +
        geom_line() +
        labs(y = "Estimated number of injuries") +
        theme_grey(15)
    } else {
      summary() |>
        ggplot(aes(age, rate, colour = sex)) +
        geom_line(na.rm = TRUE) +
        labs(y = "Injuries per 10,000 people") +
        theme_grey(15)
    }
  })
  
  max_no_stories <- reactive(length(selected()$narrative))
  
  story <- reactiveVal(1)
  
  observeEvent(input$code, {story(1)})
  
  observeEvent(input$next_story, {story((story() %% max_no_stories()) + 1)})
  
  observeEvent(input$prev_story, {story(((story() - 2) %% max_no_stories()) + 1)})
  
  output$narrative <- renderText({selected()$narrative[story()]})
}

shinyApp(ui, server)
```




